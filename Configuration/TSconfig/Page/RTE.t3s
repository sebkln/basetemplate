####################################
# Rich Text Editor (rtehtmlarea)   #
####################################

// You have to enable the following settings in the Extension Manager:
// - Enable images in the RTE [basic.enableImages]
// - Enable additional inline elements [basic.enableInlineElements]
// Otherwise you cannot use images or e.g. <code>




####################################
# BUTTONS                          #
####################################

RTE.default {
    // Rename RTE headings and sort block items:
    buttons.formatblock.items {
        h1.label = LLL:EXT:basetemplate7/Resources/Private/Language/locallang_be.xlf:header_layout.altLabels.1
        h2.label = LLL:EXT:basetemplate7/Resources/Private/Language/locallang_be.xlf:header_layout.altLabels.2
        h3.label = LLL:EXT:basetemplate7/Resources/Private/Language/locallang_be.xlf:header_layout.altLabels.3
        h4.label = LLL:EXT:basetemplate7/Resources/Private/Language/locallang_be.xlf:header_layout.altLabels.4
    }
    buttons.formatblock.orderItems = none, p, h1, h2, h3, h4, pre


    // Show these buttons:
    showButtons (
        formatblock, blockstyle, textstyle,
        undo, redo, left, center, right, justifyfull,
        bold, italic, underline, subscript, superscript, code,
        orderedlist, unorderedlist, link, unlink,
        image, textcolor, insertcharacter,
        chMode, removeformat, pastetoggle, pastebehaviour, findreplace,
        table, tableproperties, toggleborders, tablerestyle,
        rowproperties, rowinsertabove,rowinsertunder, rowdelete, rowsplit, 
        columnproperties, columninsertbefore, columninsertafter, columndelete, columnsplit,
        cellproperties, cellinsertbefore, cellinsertafter, celldelete, cellsplit, cellmerge
    )


    // Sort the buttons in this order. Buttons which aren't listed in 'toolbarOrder' are NOT displayed!
    // Additional options: space, bar, linebreak
    toolbarOrder (
        formatblock, blockstyle, textstyle, linebreak,
        undo, redo, bar, left, center, right, justifyfull, bar,
        bold, italic, underline, subscript, superscript, code, bar,
        orderedlist, unorderedlist, bar, link, unlink, bar,
        image, textcolor, insertcharacter, bar,
        chMode, removeformat, pastetoggle, pastebehaviour, findreplace, linebreak,
        table, tableproperties, toggleborders, tablerestyle, bar,
        rowproperties, rowinsertabove,rowinsertunder, rowdelete, rowsplit, bar, 
        columnproperties, columninsertbefore, columninsertafter, columndelete, columnsplit, bar,
        cellproperties, cellinsertbefore, cellinsertafter, celldelete, cellsplit, cellmerge
    )
}




####################################
# MISCELLANEOUS                    #
####################################

// Remove <select> items:
RTE.default {
    buttons.formatblock.removeItems = address,h5,h6,article,footer,header,nav,section,aside,div
    removeTags := addToList (address,h5,h6,article,footer,header,nav,section,aside,div)
    
    // want to remove 'blockstyle' items in the select menu? Just delete them in the rte.css.
    proc.allowedClasses := removeFromList(csc-frame-frame1, csc-frame-frame2)
}

// Give RTE images a custom class (you'll have to allow it in 'lib.parseFunc_RTE', too!):
# RTE.default.buttons.image.properties.class.allowedClasses = rte-img

// Remove undesired HTML tags:
RTE.default.removeTags := addToList (font)




####################################
# ALLOW YOUR OWN CSS CLASSES       #
####################################

RTE {
    default {
        // Your classes have to exist in this css file!
        // This stylesheet is NOT to be included in frontend, though. Just put the classes in your normal Frontend stylesheet, too.
        contentCSS = EXT:basetemplate7/Resources/Public/Css/rte.css
    }

    // blockstyle: Set a class for a block element, e.g.: <p>
    # classes.fooclass.name = My class "foo"
    # default.buttons.blockstyle.classesTable := addToList(fooclass)
    # default.buttons.blockstyle.tags.p.allowedClasses := addToList (fooclass)

    // textstyle: Set a class for an inline element, e.g.: <span>, <a>
    # classes.barclass.name = My class "bar"
    # default.buttons.textstyle.classesTable := addToList(barclass)
    # default.buttons.textstyle.tags.span.allowedClasses := addToList (barclass)

    // Allow these classes to be processed (saved to database):
    # default.proc.allowedClasses := addToList (barclass, fooclass)
}




####################################
# ALLOW ADDITIONAL HTML ELEMENTS   #
####################################

// Want code blocks on your website? Enable this:
# RTE.default.showButtons := addToList (formatblock,code)
# RTE.default.proc {
#     allowTags := addToList(code,pre)
#     allowTagsOutside := addToList(code,pre)
#     overruleMode = ts_css,cleanenc

#     // content to database:
#     HTMLparser_rte {
#         allowTags < RTE.default.proc.allowTags
#     }

#     // Entry HTML parser:
#     entryHTMLparser_db {
#         allowTags < RTE.default.proc.allowTags
#     }
# }




####################################
# SET YOUR OWN COLORS              #
####################################

// Create colors, 6 digit HEX codes only. Color names are arbitrary.
# RTE.default.colors = foo-color, bar-color
# RTE.colors {
#     foo-color {
#         name = My color 'foo'
#         value = #ff0000
#     }
#     bar-color {
#         name = My color 'bar'
#         value = #00ff00
#     }
# }

// Hide default colors. Not mandatory for defining its own colors.
# RTE.default.disableColorPicker = 1